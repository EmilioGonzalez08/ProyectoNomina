@model IEnumerable<Sistema_Nomina_Web.Models.dbModels.Nomina>

@{
    ViewData["Title"] = "Index";
}

<!-- Incluir DataTables CSS -->
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.5/css/jquery.dataTables.min.css">

<!-- jQuery (necesario para DataTables) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- DataTables JS -->
<script src="https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js"></script>

<style>
    /* Fondo con degradado azul cálido */
    /* General - Fondo y texto */
    body {
        background: linear-gradient(to bottom, #A3D5FF, #E3F2FD);
        color: #000000; /* Letras en negro */
        font-family: system-ui, -apple-system, sans-serif;
        text-align: center; /* Centrado de los textos */
    }

    h1 {
        color: #000000; /* Títulos en negro */
    }

    /* Botones */
    .btn {
        border-radius: 25px; /* Botones más redondeados */
        padding: 0.4rem 1rem; /* Tamaño reducido */
        font-size: 0.875rem; /* Texto más pequeño */
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .btn-primary {
        background-color: #1E90FF; /* Azul cálido */
        color: #ffffff;
    }

        .btn-primary:hover {
            background-color: #005BB5; /* Azul más oscuro al pasar el mouse */
        }

    .btn-secondary {
        background-color: #A3D5FF; /* Azul cálido claro */
        color: #000000;
    }

        .btn-secondary:hover {
            background-color: #7FB6D5; /* Azul más oscuro */
        }

    .btn-warning {
        background-color: #FFCC00; /* Amarillo cálido */
        color: #000000;
    }

        .btn-warning:hover {
            background-color: #FFB300; /* Amarillo más oscuro */
        }

    .btn-info {
        background-color: #00B5FF; /* Azul frío */
        color: #ffffff;
    }

        .btn-info:hover {
            background-color: #008BCC; /* Azul más oscuro */
        }

    .btn-danger {
        background-color: #FF5733; /* Naranja cálido */
        color: #ffffff;
    }

        .btn-danger:hover {
            background-color: #FF2A00; /* Naranja más oscuro */
        }

    .btn-outline-primary {
        background-color: transparent;
        color: #1E90FF;
        border: 2px solid #1E90FF;
    }

        .btn-outline-primary:hover {
            background-color: #1E90FF;
            color: white;
        }

    /* Botón de "Ver Periodos de Nómina" */
    .btn-ver-periodos {
        background-color: #66BB6A; /* Verde cálido */
        color: #ffffff;
        padding: 0.4rem 1rem; /* Tamaño reducido */
        font-size: 0.875rem; /* Texto más pequeño */
        border-radius: 25px; /* Redondeado */
        transition: background-color 0.3s ease;
    }

        .btn-ver-periodos:hover {
            background-color: #388E3C; /* Verde más oscuro */
        }

    /* Tabla */
    table {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
        background-color: #81C7FF; /* Azul más fuerte */
    }

    th, td {
        padding: 8px; /* Ajuste del espacio en las celdas */
        text-align: center;
        border: 1px solid #ddd;
    }

    th {
        background-color: #4682B4; /* Azul fuerte */
        color: #ffffff; /* Texto blanco */
    }

    td {
        background-color: #E3F2FD; /* Azul claro */
        color: #000000; /* Texto negro */
    }

    /* Espaciado entre botones */
    .action-buttons a {
        margin: 2px; /* Espaciado más uniforme */
        display: inline-block; /* Asegura que cada botón sea tratado como elemento independiente */
    }

</style>

<h1>Nómina</h1>

<p>
    <a class="btn btn-primary" asp-action="Create">Crear Nueva Nómina</a>
</p>

<p>
    <a class="btn btn-ver-periodos" asp-controller="PeriodoNomina" asp-action="Index">Ver Periodos de Nómina</a>
</p>

<p>
    <button id="btnImprimirXml" class="btn btn-secondary">Imprimir XML</button>
</p>
<script>
    document.getElementById("btnImprimirXml").addEventListener("click", function () {
        // Obtener los datos de la tabla
        const rows = document.querySelectorAll("#nominaTable tbody tr");
        let xmlContent = `<?xml version="1.0" encoding="UTF-8"?>\n<Nominas>\n`;

        rows.forEach(row => {
            const cells = row.querySelectorAll("td");
            xmlContent += `
        <Nomina>
            <SalarioBase>${cells[0].textContent.trim()}</SalarioBase>
            <SalarioNominal>${cells[1].textContent.trim()}</SalarioNominal>
            <HorasExtra>${cells[2].textContent.trim()}</HorasExtra>
            <ImporteHorasExtra>${cells[3].textContent.trim()}</ImporteHorasExtra>
            <Faltas>${cells[4].textContent.trim()}</Faltas>
            <DescuentoFaltas>${cells[5].textContent.trim()}</DescuentoFaltas>
            <Isr>${cells[6].textContent.trim()}</Isr>
            <Imss>${cells[7].textContent.trim()}</Imss>
            <OtrasDeducciones>${cells[8].textContent.trim()}</OtrasDeducciones>
            <TotalPercepciones>${cells[9].textContent.trim()}</TotalPercepciones>
            <TotalDeducciones>${cells[10].textContent.trim()}</TotalDeducciones>
            <SalarioNeto>${cells[11].textContent.trim()}</SalarioNeto>
            <FechaCalculo>${cells[12].textContent.trim()}</FechaCalculo>
            <Periodicidad>${cells[13].textContent.trim()}</Periodicidad>
            <Trabajador>${cells[14].textContent.trim()}</Trabajador>
        </Nomina>`;
        });

        xmlContent += `\n</Nominas>`;

        // Crear un blob para descargar el XML
        const blob = new Blob([xmlContent], { type: "application/xml" });
        const url = URL.createObjectURL(blob);

        // Crear un enlace para descargar el archivo
        const a = document.createElement("a");
        a.href = url;
        a.download = "nominas.xml";
        a.click();

        // Liberar el objeto URL
        URL.revokeObjectURL(url);
    });
</script>


<div style="overflow-x:auto;">
    <table id="nominaTable" class="display table table-striped table-bordered" style="width:100%">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(model => model.SalarioBase)</th>
                <th>Salario Nominal</th>
                <th>@Html.DisplayNameFor(model => model.HorasExtra)</th>
                <th>@Html.DisplayNameFor(model => model.ImporteHorasExtra)</th>
                <th>@Html.DisplayNameFor(model => model.Faltas)</th>
                <th>@Html.DisplayNameFor(model => model.DescuentoFaltas)</th>
                <th>@Html.DisplayNameFor(model => model.Isr)</th>
                <th>@Html.DisplayNameFor(model => model.Imss)</th>
                <th>@Html.DisplayNameFor(model => model.OtrasDeducciones)</th>
                <th>@Html.DisplayNameFor(model => model.TotalPercepciones)</th>
                <th>@Html.DisplayNameFor(model => model.TotalDeducciones)</th>
                <th>@Html.DisplayNameFor(model => model.SalarioNeto)</th>
                <th>@Html.DisplayNameFor(model => model.FechaCalculo)</th>
                <th>@Html.DisplayNameFor(model => model.Trabajador.Periodicidad)</th>
                <th>@Html.DisplayNameFor(model => model.Trabajador.Nombre)</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.SalarioBase)</td>
                    <td>@item.SalarioSegunPeriodicidad.ToString("C")</td>
                    <td>@Html.DisplayFor(modelItem => item.HorasExtra)</td>
                    <td>@Html.DisplayFor(modelItem => item.ImporteHorasExtra)</td>
                    <td>@Html.DisplayFor(modelItem => item.Faltas)</td>
                    <td>@Html.DisplayFor(modelItem => item.DescuentoFaltas)</td>
                    <td>@Html.DisplayFor(modelItem => item.Isr)</td>
                    <td>@Html.DisplayFor(modelItem => item.Imss)</td>
                    <td>@Html.DisplayFor(modelItem => item.OtrasDeducciones)</td>
                    <td>@Html.DisplayFor(modelItem => item.TotalPercepciones)</td>
                    <td>@Html.DisplayFor(modelItem => item.TotalDeducciones)</td>
                    <td>@Html.DisplayFor(modelItem => item.SalarioNeto)</td>
                    <td>@Html.DisplayFor(modelItem => item.FechaCalculo)</td>
                    <td>@Html.DisplayFor(modelItem => item.Trabajador.Periodicidad.Nombre)</td>
                    <td>@Html.DisplayFor(modelItem => item.Trabajador.Nombre)</td>
                    <td>
                        <div class="action-buttons">
                            <a class="btn btn-warning btn-sm" asp-action="Edit" asp-route-id="@item.NominaId">Editar</a>
                            <a class="btn btn-info btn-sm" asp-action="Details" asp-route-id="@item.NominaId">Detalles</a>
                            <a class="btn btn-danger btn-sm" asp-action="Delete" asp-route-id="@item.NominaId">Eliminar</a>
                            <a class="btn btn-outline-primary" asp-action="GenerarPDF" asp-route-id="@item.NominaId">PDF</a>
                            <button class="btn btn-secondary btn-sm btnGenerarXML">Generar XML</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Inicializar DataTables con scroll horizontal -->
<script>
    $(document).ready(function () {
        $('#nominaTable').DataTable({
            "language": {
                "url": "https://cdn.datatables.net/plug-ins/1.13.5/i18n/Spanish.json"
            },
            "pageLength": 10,
            "lengthMenu": [5, 10, 25, 50],
            "order": [[0, 'desc']],
            "scrollX": true, // Habilita el scroll horizontal
            "columnDefs": [
                { "orderable": false, "targets": -1 } // Desactiva la ordenación en la columna de acciones
            ]
        });
    });
</script>
<script>
    // Manejar la generación de XML para cada nómina individual
    document.addEventListener("DOMContentLoaded", function () {
        const botonesXml = document.querySelectorAll(".btnGenerarXML");
        botonesXml.forEach(btn => {
            btn.addEventListener("click", function () {
                // Obtener la fila asociada al botón
                const fila = btn.closest("tr");
                const celdas = fila.querySelectorAll("td");
                const xmlContent = `<?xml version="1.0" encoding="UTF-8"?>\n<Nomina>\n` +
                    `    <SalarioBase>${celdas[0].textContent.trim()}</SalarioBase>\n` +
                    `    <SalarioNominal>${celdas[1].textContent.trim()}</SalarioNominal>\n` +
                    `    <HorasExtra>${celdas[2].textContent.trim()}</HorasExtra>\n` +
                    `    <ImporteHorasExtra>${celdas[3].textContent.trim()}</ImporteHorasExtra>\n` +
                    `    <Faltas>${celdas[4].textContent.trim()}</Faltas>\n` +
                    `    <DescuentoFaltas>${celdas[5].textContent.trim()}</DescuentoFaltas>\n` +
                    `    <Isr>${celdas[6].textContent.trim()}</Isr>\n` +
                    `    <Imss>${celdas[7].textContent.trim()}</Imss>\n` +
                    `    <OtrasDeducciones>${celdas[8].textContent.trim()}</OtrasDeducciones>\n` +
                    `    <TotalPercepciones>${celdas[9].textContent.trim()}</TotalPercepciones>\n` +
                    `    <TotalDeducciones>${celdas[10].textContent.trim()}</TotalDeducciones>\n` +
                    `    <SalarioNeto>${celdas[11].textContent.trim()}</SalarioNeto>\n` +
                    `    <FechaCalculo>${celdas[12].textContent.trim()}</FechaCalculo>\n` +
                    `    <Periodicidad>${celdas[13].textContent.trim()}</Periodicidad>\n` +
                    `    <Trabajador>${celdas[14].textContent.trim()}</Trabajador>\n` +
                    `</Nomina>`;

                // Crear un blob para descargar el XML
                const blob = new Blob([xmlContent], { type: "application/xml" });
                const url = URL.createObjectURL(blob);

                // Crear un enlace para descargar el archivo
                const a = document.createElement("a");
                a.href = url;
                a.download = `nomina_${celdas[14].textContent.trim()}.xml`; // Incluye el nombre del trabajador en el archivo
                a.click();

                // Liberar el objeto URL
                URL.revokeObjectURL(url);
            });
        });
    });
</script>

